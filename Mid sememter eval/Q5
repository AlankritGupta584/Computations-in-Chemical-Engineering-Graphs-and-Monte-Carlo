class Solution {
public:
    using pii = pair<int, int>;

    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();
        int end = n * n;
        int visited[end + 1];
        int bd[end + 1];

        memset(visited, 0, sizeof(int) * (end + 1));

        // Flatten the board for easier traversal
        int index = 1;
        bool reverse = false;
        
        for (int i = n - 1; i >= 0; i--) {
            if (reverse) {
                for (int j = n - 1; j >= 0; j--) {
                    bd[index++] = board[i][j];
                }
            } else {
                for (int j = 0; j < n; j++) {
                    bd[index++] = board[i][j];
                }
            }
            reverse = !reverse;
        }

        // BFS to find the shortest path
        queue<pii> q;
        q.push({1, 0}); // (current position, number of moves)

        while (!q.empty()) {
            pii cur = q.front();
            q.pop();

            if (cur.first == end) {
                return cur.second; // Reached the last cell
            }

            for (int i = 1; i <= 6 && cur.first + i <= end; i++) {
                int next = cur.first + i;
                if (visited[next]) {
                    continue;
                }
                
                int nextPos = (bd[next] == -1) ? next : bd[next];
                q.push({nextPos, cur.second + 1});
                visited[next] = 1;
            }
        }

        return -1; // No valid path found
    }
};
